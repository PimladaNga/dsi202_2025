"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&)@5u+$8cjx9!p+u0@jo^-#&8@*5caoje-3a9$_#^i73*@+$c*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

LANGUAGE_CODE = 'th'
TIME_ZONE = 'Asia/Bangkok'
USE_I18N = True
USE_L10N = True 
USE_TZ = True
SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'myapp',
    'rest_framework',
    'widget_tweaks',

    'django.contrib.sites', # Required by allauth

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # For Google OAuth
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the client_id and secret
        # or list them here:
        # 'APP': {
        #     'client_id': 'YOUR_GOOGLE_CLIENT_ID',
        #     'secret': 'YOUR_GOOGLE_CLIENT_SECRET',
        #     'key': '' # Not needed for Google
        # },
        'SCOPE': [ # ขอบเขตข้อมูลที่ขอจาก Google
            'profile',
            'email',
        ],
        'AUTH_PARAMS': { # พารามิเตอร์เพิ่มเติมตอนขอ authorization
            'access_type': 'online',
        }
    }
}

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'myapp/templates'), # ที่คุณได้แก้ไข/เพิ่มเข้ามา
        ], # <--- ปิด list ของ 'DIRS'
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ], 
        }, 
    }, 
] 


WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import os  # อย่าลืม import os ด้วยถ้ายังไม่ได้ import

# Media settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Login settings
LOGIN_URL = 'account_login'  # ชื่อ URL pattern ของหน้า login ของคุณ
LOGIN_REDIRECT_URL = 'home' # หลังจาก login สำเร็จ ให้ไปที่หน้า home
LOGOUT_REDIRECT_URL = 'home' # หลังจาก logout สำเร็จ ให้ไปที่หน้า home
STATIC_URL = '/static/'

# Redirects
LOGIN_REDIRECT_URL = '/' # หรือ URL ที่ต้องการให้ไปหลังล็อกอินสำเร็จ
LOGOUT_REDIRECT_URL = '/' # หรือ URL ที่ต้องการให้ไปหลังล็อกเอาท์
ACCOUNT_LOGOUT_REDIRECT_URL = '/'

# Email settings (ถ้าต้องการให้มีการยืนยันอีเมล หรือเปลี่ยนอีเมล)
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_LOGIN_METHODS = {'email'} # ให้ล็อกอินด้วยอีเมล (หลังจากได้มาจาก Google)
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_ALLOW_REGISTRATION = False # ปิดการลงทะเบียนแบบปกติ

# การตั้งค่าเพิ่มเติมสำหรับ django-allauth (ตรวจสอบว่ามีอยู่และเหมาะสม)
ACCOUNT_AUTHENTICATION_METHOD = "email"  # หรือ "username_email" หรือ "username"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True  # สร้างบัญชีให้อัตโนมัติเมื่อ login ผ่าน social ครั้งแรก
ACCOUNT_LOGOUT_ON_GET = False  # เพื่อให้มีหน้ายืนยัน logout (ตามที่เราทำไปแล้ว)
